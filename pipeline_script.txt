#!/bin/bash

# defining file paths as variables for simpler use later in the script
fastqdir=/localdisk/data/BPSM/AY21/fastq
Tcongo_genome=/localdisk/data/BPSM/AY21/Tcongo_genome/TriTrypDB-46_TcongolenseIL3000_2019_Genome.fasta.gz
bedfile=/localdisk/data/BPSM/AY21/TriTrypDB-46_TcongolenseIL3000_2019.bed

# make new directory for fastqc outputs
mkdir fastqc_outputs

# run fastqc on all fastq files
for fastq_file in $fastqdir/*fq.gz
do
 fastqc -o fastqc_outputs $fastq_file 
done

# assess quality of output data
for fastqc_file in fastqc_outputs/*.zip
do
 echo -e "\nSee below for summary statistics and fastqc quality metrics that sample ${fastqc_file:15:-11} failed on or where there are warnings."
 echo "Please see the full html report including plots at ${fastqc_file::-4}.html"
 echo -e "If quality is deemed to be insufficient please use the program Trimmomatic to filter poor quality reads and trim poor quality bases."
 echo -e "Please save any trimmed fastq files in the same location with the same name as the original fastq file to overwrite it.\n"
 # unzip the fastqc output zip and show relevant information from the fastqc_data and summary text files.
 unzip -q $fastqc_file 
 head ${fastqc_file:15:-4}/fastqc_data.txt
 echo ""
 cat ${fastqc_file:15:-4}/summary.txt | grep "FAIL\|WARN"
done
 
# ask user if they are happy to proceed with the analysis. 
read -p $'Would you like to proceed with the analysis? Please enter y or n:' x
if test $x == y
then 

# create bowtie2 index database for the T. congolense reference genome
bowtie2-build $Tcongo_genome Tcongo_indexed_genome

# iterate over all pairs of fastq files
for fastq_1_file in $fastqdir/*1.fq.gz
do
 fastq_2_file=`echo $fastq_1_file | sed 's/_1/_2/'`

# map each pair of reads to the bowtie index database for the T. congolense reference genome 
 bowtie2 -p 32 -x Tcongo_indexed_genome -q -1 $fastq_1_file -2 $fastq_2_file -S ${fastq_1_file:32:-8}.sam

# convert sam file from bowtie2 output to an indexed bam file
 samtools view -b -S ${fastq_1_file:32:-8}.sam > ${fastq_1_file:32:-8}.bam
 samtools sort ${fastq_1_file:32:-8}.bam -o ${fastq_1_file:32:-8}.sorted.bam
 samtools index ${fastq_1_file:32:-8}.sorted.bam
done


# read in information from the sample details file and paste it into relevant text files for the sample groups
IFS=$'\t'
while read id sample replicate time treatment end1 end2
do
# ignore header line
if test $replicate != Replicate
 then
 echo -e "$id\t$sample\t$replicate\t$time\t$treatment\t$end1\t$end2" >> $sample\_$time\_$treatment\_group.txt
fi
done < "/localdisk/data/BPSM/AY21/fastq/100k.fqfiles" 

# iterate over all 15 sample groups
for group_file in *group.txt
do
 # initialise an array that will eventually contain the 3 sample indexed bam files for the sample group
 bam_file_array=()
 # read in the file containing the sample details for that group
 while read id sample replicate time treatment end1 end2
 do
 # add the corresponding indexed bam files for the samples in the group to the bam file array
 for bam_file in *.sorted.bam
  do
  if test ${end1::13} == ${bam_file::13}
   then
   bam_file_array+=($bam_file)
  fi
 done
 done < $group_file

 # use the array as input to bedtools multicov to count reads for all the genes 
 # sample read counts will appear in columns in the same file making determining their mean much easier
 bedtools multicov -bams ${bam_file_array[*]} -bed $bedfile > ${group_file::-4}.counts.tsv

# find the mean of the read counts data for the group and print into a new file along with the gene names and descriptions
 while read f1 f2 f3 gene_name gene_description sample1 sample2 sample3
 do
 total=$(( sample1+sample2+sample3 ))
 mean=$(echo "$total/3" | bc -l)
 printf "$gene_name\t$gene_description\t%.2f\n" $mean >> ${group_file::-4}.mean.counts.tsv
 done < ${group_file::-4}.counts.tsv
done

# print the list of mean counts data for each of the sample groups to the screen 
printf "\n See below for the mean counts filenames containing mean read count data for each of the sample groups.\n"
ls *mean.counts.tsv


# calculate fold change data

# allow the user to do multiple group wise comparisons without running the whole program again
comparison_array=()
printf "\nThe below allows you to perform multiple groupwise comparisons. Each comparison is estimated to take around 30 minutes.\n"
IFS=' '
while true
do
 # user inputs the mean counts filenames for two sample groups that they would like to compare
 read -p $'\nEnter the two mean counts filenames (separated by a space) for two groups you would like to compare 
the expression data of. Gene expression fold change will be shown as the ratio of the read count mean of the second file to the first file.
Enter q to once you have entered all groupwise comparisons you would like to make:\n' f1 f2
 if test $f1 == q
  then break
 else
  # join the file names as a pair separated by a comma
  combined_file=$f1,$f2
  # add this file pair to an array
  total_comparison_array+=($combined_file)
 fi
done

# iterate over all paired file names in the array
for comb_file in ${total_comparison_array[@]}
do
 # split the paired element back into the two original file names
 IFS=',' read -ra individual_comparison_array <<< $comb_file
 first_file=${individual_comparison_array[0]}
 second_file=${individual_comparison_array[1]}
 
 # read in the first and second files
 IFS=$'\t'
 while read gene_name gene_description mean
 do
  while read gene_name_2 gene_description_2 mean_2
  do
   # match the lines from the two files up
   if [[ $gene_name == $gene_name_2 ]]
    then
    # calculate fold change and print gene name, description and fold change to a file
    # unless the original mean expression is 0 in which case avoid dividing by 0 and print appropriate message on that line
    if [[ $mean == 0.00 ]] && [[ $mean2 != 0.00 ]]
     then
     printf "$gene_name\t$gene_description\tExpression 0 in first group\n" >> ${second_file::-22}_vs_${first_file::-22}_fold_change_data.txt
    else
     fold_change=$(echo "$mean_2/$mean" | bc -l)
     printf "$gene_name\t$gene_description\t%.2f\n" $fold_change >> ${second_file::-22}_vs_${first_file::-22}_fold_change_data.txt
    fi
   fi
  done < $second_file
 done < $first_file
 
 # sort the fold change data file on the third column to give the genes in descending order of fold change
 # print to another "sorted" fold change file
 sort -t$'\t' -k3,3nr ${second_file::-22}_vs_${first_file::-22}_fold_change_data.txt >> ${second_file::-22}_vs_${first_file::-22}_sorted_fold_change_data.txt
  
 # print relevant messages for the user
 printf "\nSee below for top 10 genes with greater expression in ${second_file::-22} compared to ${first_file::-22}\n"
 head ${second_file::-22}_vs_${first_file::-22}_sorted_fold_change_data.txt
 printf "\nFull relative expression data in descending order can be viewed in ${second_file::-22}_vs_${first_file::-22}_sorted_fold_change_data.txt \n"
done
fi

